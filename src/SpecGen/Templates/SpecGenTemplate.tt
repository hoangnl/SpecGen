<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".txt" #>
<#@ parameter type="com.bjss.generator.Model.StoryNode" name="Story" #>
<#@ parameter type="com.bjss.generator.Model.StoryDocument" name="StoryDoc" #>
<#= string.Join(Environment.NewLine, this.StoryDoc.Usings.Select(x => string.Format("using {0};", x))) #>

namespace <#= this.StoryDoc.Namespace #>
{
    public class <#= this.GetFormatedName(this.Story.Title.Text, "") #> : UserStory
    {
        public <#= this.GetFormatedName(this.Story.Title.Text, "") #>()
        {
            AsA = "<#= this.Story.AsA.Text #>";
            IWant = "<#= this.Story.IWant.Text #>";
            SoThat = "<#= this.Story.SoThat.Text #>";
        }
    }
<#
    foreach (var scenario in this.Story.Scenarios)
    {
#>
    public class <#= this.GetFormatedName(scenario.Title.Text, "") #> : ScenarioFor<<#= this.StoryDoc.Target #>,  <#= this.GetFormatedName(this.Story.Title.Text, "") #>>
    {
<#
    foreach (var step in scenario.Steps)
    {
#>
        <#= GetAttribute(step.Group, step.Addition, step.Text) #>public void <#= this.GetFormatedName(step.Group, step.Addition, step.Text, "_") #>()
        {
            throw new NotImplementedException();
        }

<#        
    }
#>
    }

<#        
    }
#>
}
<#+
	private Regex CSharpIdentifierValidation 
	{
		get { return new Regex(@"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Cf}\p{Pc}\p{Lm}]", RegexOptions.Compiled); }
    }

	private string GetFormatedName(string name, string replaceSpacesWith)
    {
        return GetFormatedName("", "",  name, replaceSpacesWith);
    }

	private string GetFormatedName(string @group, string addition,  string name, string replaceSpacesWith)
    {
		string proposedName = GenerateClassName(name, replaceSpacesWith);

		if ((@group ?? string.Empty).Length > 0 && proposedName.StartsWith(@group))
        {
			proposedName = proposedName.Substring(@group.Length).Trim();
        } 
		if ((addition ?? string.Empty).Length > 0 && proposedName.StartsWith(addition))
        {
			proposedName = proposedName.Substring(addition.Length).Trim();
        } 

        return string.Format("{0}{1}{2}", addition, @group, proposedName) ;
    }

	private string GetAttribute(string scenario, string addition, string text)
	{
	    return string.IsNullOrEmpty((scenario ?? string.Empty) + (addition ?? string.Empty))
			  || !IsAttributeRequired(text)  
	        ? string.Empty
	        : string.Format("[{0}{1}(\"{2}\")]{3}        ", addition, scenario, text, Environment.NewLine);
    }

	private bool IsAttributeRequired(string value)
	{
		return CSharpIdentifierValidation.IsMatch(CleanWhiteSpaces(value, ""));
	}

	private string GenerateClassName(string value, string replaceSpacesWith)
	{
		var className = CleanWhiteSpaces(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(MakeMoreReadable(value)), replaceSpacesWith);
		
		var ret = className;
		bool isValid = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#").IsValidIdentifier(className);

		if (!isValid)
		{ 
			// File name contains invalid chars, remove them
			ret = CSharpIdentifierValidation.Replace(className, string.Empty);

			// Class name doesn't begin with a letter, insert an underscore
			if (!char.IsLetter(ret, 0))
			{
				ret = ret.Insert(0, "_");
			}
		}

		//ret = CleanWhiteSpaces(ret, replaceSpacesWith);
		isValid = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#").IsValidIdentifier(ret);
		return isValid ? ret : "@" + ret;
	}

	private string CleanWhiteSpaces(string str, string whiteSpaceReplacement)
    {
		var tempStr = Regex.Replace(str, @"\s+", whiteSpaceReplacement);
        return StoryDoc.StringsToBeRemoved.Aggregate(tempStr, (current, toReplace) => current.Replace(toReplace, whiteSpaceReplacement));
    }

	private string MakeMoreReadable(string str)
    {
        return StoryDoc.StringsToBeReplaced.Keys.Aggregate(str, (current, toReplace) => current.Replace(toReplace, StoryDoc.StringsToBeReplaced[toReplace]));
    }
#>