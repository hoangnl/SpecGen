<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".txt" #>
<#@ parameter type="com.bjss.generator.Model.StoryNode" name="Story" #>
using System;
using BddfySpecGen.ATM;
using Specify.Stories;
using TestStack.BDDfy;

namespace BddfySpecGen
{
    public class <#= this.GetFormatedName(this.Story.Title.Text, "") #> : UserStory
    {
        public <#= this.GetFormatedName(this.Story.Title.Text, "") #>()
        {
            AsA = "<#= this.Story.AsA.Text #>";
            IWant = "<#= this.Story.IWant.Text #>";
            SoThat = "<#= this.Story.SoThat.Text #>";
        }
    }
<#
    foreach (var scenario in this.Story.Scenarios)
    {
#>
    public class <#= this.GetFormatedName(scenario.Title.Text, "") #> : ScenarioFor<object,  <#= this.GetFormatedName(this.Story.Title.Text, "") #>>
    {
<#
    foreach (var step in scenario.Steps)
    {
#>
        <#= GetAttribute(step.Text) #>public void <#= this.GetFormatedName(step.Text, "_") #>()
        {
            throw new NotImplementedException();
        }
<#        
    }
#>
    }

<#        
    }
#>
}
<#+
	private string GetFormatedName(string name , string replaceSpacesWith)
    {
		TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
        return GenerateClassName(textInfo.ToTitleCase(name), replaceSpacesWith);
    }

	private string GetAttribute(string text)
	{
	    string prefix = String.Empty;
        if (text.StartsWith("Given"))
        {
            prefix = "Given";
        }
        else if (text.StartsWith("When"))
        {
            prefix = "When";
        }
        else if (text.StartsWith("Then"))
        {
            prefix = "Then";
        }

	    return !string.IsNullOrEmpty(prefix)
	        ? string.Empty
	        : string.Format("[{0}(\"{1}\")]\r\n        ", prefix, text);
    }

	private static string GenerateClassName(string value, string replaceSpacesWith)
	{
		var className = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(value).Replace("$", "Dollars ").Replace("£ ", "Pounds");
		var ret = className;
		bool isValid = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#").IsValidIdentifier(className);

		if (!isValid)
		{ 
			// File name contains invalid chars, remove them
			Regex regex = new Regex(@"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Cf}\p{Pc}\p{Lm}]");
			ret = regex.Replace(className, "");

			// Class name doesn't begin with a letter, insert an underscore
			if (!char.IsLetter(ret, 0))
			{
				ret = ret.Insert(0, "_");
			}
		}

		return ret.Replace(" ", replaceSpacesWith);
	}
#>